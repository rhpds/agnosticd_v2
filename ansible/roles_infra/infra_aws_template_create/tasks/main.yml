---
- name: Retrieve stack_deployed from provision-user-data.yaml
  when: stack_deployed is undefined
  ansible.builtin.set_fact:
    stack_deployed: >-
      {{ lookup('agnosticd_user_data', 'stack_deployed')
      | default(false, true)
      | bool }}

# This condition cannot be set outside of the role
# If set in the 'when' of the loop, it's not evaluated between calls
# and this role will run everytime.
- name: Deploy template
  when: stack_deployed is not defined or not stack_deployed
  block:
  - name: Include infra_cloud_tags role
    when: cloud_tags_final is not defined
    ansible.builtin.include_role:
      name: infra_cloud_tags

  - name: Set cloudformation_template
    ansible.builtin.set_fact:
      cloudformation_template: "{{ output_dir }}/{{ config }}.{{ guid }}.{{ cloud_provider }}_cloud_template"

  - name: Wait a bit for the previous stack and child resources to be deleted
    when:
    - cloudformation_pause is defined
    - cloudformation_out is defined
    - cloudformation_out is failed
    ansible.builtin.pause:
      minutes: "{{ cloudformation_pause | default(0) }}"

  - name: Detect custom images
    when:
    - allow_custom_images | d(true) | bool
    - osrelease is defined or repo_version is defined
    block:
    - name: Include detect_custom_images
      ansible.builtin.include_tasks: detect_custom_images.yml

    - name: Regenerate the CloudFormation template because of custom images
      when:
      - amifacts is defined
      - amifacts is not skipped
      - "'images' in amifacts"
      - amifacts.images | default([]) | length > 0
      ansible.builtin.include_role:
        name: "infra_aws_template_generate"

  - name: Launch CloudFormation from local template
    when: stat_template.stat.size <= 51200
    amazon.aws.cloudformation:
      aws_access_key: "{{ aws_access_key_id }}"
      aws_secret_key: "{{ aws_secret_access_key }}"
      stack_name: "{{ project_tag }}"
      state: "present"
      region: "{{ aws_region_loop | default(aws_region) | default(region) | default('us-east-1') }}"
      # rollback is unreliable, it can make this task hang forever.
      disable_rollback: true
      tags: "{{ cloud_tags_final }}"
      template_body: "{{ lookup('file', cloudformation_template) }}"
    register: cloudformation_out
    until: >-
      cloudformation_out is succeeded
      and (
        'output' in cloudformation_out
        and cloudformation_out.output in ["Stack CREATE complete", "Stack is already up-to-date."]
      )
    retries: "{{ cloudformation_retries | default(3) }}"
    delay: "{{ cloudformation_retry_delay | default(30) }}"
    ignore_errors: true

  - name: Launch CloudFormation template from S3
    when: stat_template.stat.size > 51200
    amazon.aws.cloudformation:
      aws_access_key: "{{ aws_access_key_id }}"
      aws_secret_key: "{{ aws_secret_access_key }}"
      stack_name: "{{ project_tag }}"
      state: "present"
      region: "{{ aws_region_loop | default(aws_region) | default(region) | default('us-east-1') }}"
      # rollback is unreliable, it can make this task hang forever.
      disable_rollback: true
      tags: "{{ cloud_tags_final }}"
      template_url: "https://s3.amazonaws.com/{{ bucket_templates }}/{{ config }}.{{ guid }}.{{ cloud_provider }}_cloud_template"
    args: "{{ cloudform_args }}"
    register: cloudformation_out
    until: >-
      cloudformation_out is succeeded
      and (
        'output' in cloudformation_out
        and cloudformation_out.output in ["Stack CREATE complete", "Stack is already up-to-date.", "Stack UPDATE failed"]
      )
    retries: "{{ cloudformation_retries | default(3) }}"
    delay: "{{ cloudformation_retry_delay | default(30) }}"
    ignore_errors: true

  - name: Debug cloudformation
    when: not cloudformation_out is succeeded
    ansible.builtin.debug:
      var: cloudformation_out

  - name: Debug cloudformation
    ansible.builtin.debug:
      var: cloudformation_out
      verbosity: 2

  - name: Set up fallback deploy
    when:
    - cloudformation_out is failed
    - fallback_regions is defined
    - fallback_regions | length > 0
    block:
    # TODO: move this into destroy_tasks.yml
    - name: Delete S3 bucket if it exists
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        AWS_DEFAULT_REGION: "{{ aws_region_loop | default(aws_region) }}"
      amazon.aws.s3_bucket:
        name: "{{ config }}-{{ guid }}"
        state: absent
        force: true
        region: "{{ aws_region_loop | default(aws_region) }}"
      register: s3_result
      until: s3_result is succeeded
      retries: 5
      delay: "{{ cloudformation_retry_delay | default(60) }}"
      ignore_errors: true

    - name: Report s3 error
      when: s3_result is not succeeded
      ansible.builtin.fail:
        msg: "FAIL {{ project_tag }} delete s3"

    - name: Destroy cloudformation template
      amazon.aws.cloudformation:
        aws_access_key: "{{ aws_access_key_id }}"
        aws_secret_key: "{{ aws_secret_access_key }}"
        stack_name: "{{ project_tag }}"
        state: "absent"
        region: "{{ aws_region_loop | default(aws_region) }}"
        disable_rollback: true
        tags:
          Stack: "project {{ config }}-{{ guid }}"
      register: cloudformation_destroy_result
      until: cloudformation_destroy_result is succeeded
      retries: 5
      delay: "{{ cloudformation_retry_delay | default(60) }}"
      ignore_errors: true

    - name: Report Cloudformation Destroy error
      when: cloudformation_destroy_result is failed
      ansible.builtin.fail:
        msg: "FAIL {{ project_tag }} Destroy Cloudformation"

  - name: Report Cloudformation error
    when:
    - cloudformation_out is failed
    - fallback_regions is not defined
    ansible.builtin.fail:
      msg: "FAIL {{ project_tag }} Create Cloudformation"

  - name: Save aws_region_loop and cloudformation_out into aws_region_final and cloudformation_out_final
    when: (cloudformation_out is succeeded) or (not cloudformation_out.changed)
    ansible.builtin.set_fact:
      aws_region_final: "{{ aws_region_loop }}"
      # keep cloudformation_out elsewhere because it's overriden by later runs of this
      # role even if task is skipped (it's a register)
      cloudformation_out_final: "{{ cloudformation_out }}"

  - name: Debug cloudformation_out_final
    ansible.builtin.debug:
      var: cloudformation_out_final
      # verbosity: 2

  - name: Output region
    when:
    - cloudformation_out is succeeded
    - aws_region != aws_region_final
    ansible.builtin.debug:
      msg: "FALLBACK REGION = {{ aws_region_final }}"

  - name: Set stack_deployed to true
    when: cloudformation_out is succeeded
    ansible.builtin.set_fact:
      stack_deployed: true

  - name: Save stack_deployed for future runs (idempotent)
    when: cloudformation_out is succeeded
    agnosticd_user_info:
      data:
        stack_deployed: true

  - name: Set stack_deployed to false
    when: cloudformation_out is failed
    ansible.builtin.set_fact:
      stack_deployed: false
