---
# Cloudformation doesn't guarantee to place the instances into an Availability Zone
# that can host all instance types. That results in random errors.
- name: Detect all possible Availability Zones that can host all the instance types and pick one
  when:
  - infra_aws_template_generate_auto_select_availability_zone | bool
  - instances | length > 0
  - aws_availability_zone is undefined
  ansible.builtin.include_tasks: locate_availability_zones.yml

- name: Locate template
  ansible.builtin.import_tasks: locate_template.yml

- name: Security groups
  ansible.builtin.import_tasks: security_groups.yml

- name: Set fact for cloudformation template
  ansible.builtin.set_fact:
    cloudformation_template: "{{ output_dir }}/{{ config }}.{{ guid }}.{{ cloud_provider }}_cloud_template"

- name: Print cloudformation_template
  ansible.builtin.debug:
    var: cloudformation_template

- name: AWS Generate CloudFormation Template
  ansible.builtin.template:
    src: "{{ cloudformation_template_src }}"
    dest: "{{ cloudformation_template }}"
    mode: ug=rw,o=r

######################### Copy CF Template to S3 if too big
- name: Stat CloudFormation template
  ansible.builtin.stat:
    path: "{{ cloudformation_template }}"
  register: stat_template

- name: Copy template to S3
  when: stat_template.stat.size > 51200
  tags:
  - aws_infrastructure_deployment
  - gen_cf_template
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
    AWS_DEFAULT_REGION: "{{ aws_region_final | default(aws_region) }}"
  block:
  - name: Get Caller Identity
    amazon.aws.aws_caller_info:
    register: r_aws_user

  # Bucket name must be globally unique. Use the userID to define the bucketname.
  # Otherwise when we use the code in another account it fails because the bucket
  # already exists.
  - name: Save AWS account user
    ansible.builtin.set_fact:
      aws_account_user: "{{ r_aws_user.user_id }}"

  - name: Set bucket templates
    ansible.builtin.set_fact:
      bucket_templates: "cloudformation-templates-{{ aws_account_user | default('user') | lower }}"

  - name: Create bucket
    amazon.aws.s3_bucket:
      name: "{{ bucket_templates }}"

  - name: Copy Template to S3
    amazon.aws.aws_s3:
      bucket: "{{ bucket_templates }}"
      object: "{{ config }}.{{ guid }}.{{ cloud_provider }}_cloud_template"
      src: "{{ cloudformation_template }}"
      mode: put

######################### Validate CF Template
- name: Check for !Ref in CF template
  ansible.builtin.lineinfile:
    dest: "{{ cloudformation_template }}"
    regexp: '^(.*)!Ref(.*)$'
    line: '\1\2'
    backrefs: true
    backup: true
  register: r_ref_presence

- name: Assert that cloudformation template is valid
  ansible.builtin.assert:
    that: >
      lookup('file', cloudformation_template) | from_yaml is succeeded
      or lookup('file', cloudformation_template) | from_json is succeeded
    success_msg: Cloudformation template is syntactically valid

- name: Copy original !Ref CF template back in place
  when: r_ref_presence.changed
  ansible.builtin.copy:
    src: "{{ r_ref_presence.backup }}"
    dest: "{{ cloudformation_template }}"
    remote_src: true
    mode: ug=rw,o=r

- name: Validate cloudformation template with validate-template (local)
  when: stat_template.stat.size <= 51200
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
    AWS_DEFAULT_REGION: "{{ aws_region_final | default(aws_region) }}"
  ansible.builtin.command: >-
    aws cloudformation validate-template
    --region {{ aws_region_final | default(aws_region) | default(region) | default('us-east-1') }}
    --template-body file://{{ cloudformation_template }}
  changed_when: false
  register: r_cloudformation_validation
  until: r_cloudformation_validation is succeeded
  retries: "{{ cloudformation_retries }}"
  delay: 20

- name: Validate cloudformation template with validate-template (S3)
  when: stat_template.stat.size > 51200
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
    AWS_DEFAULT_REGION: "{{ aws_region_final | default(aws_region) }}"
  ansible.builtin.command: >-
    aws cloudformation validate-template
    --region {{ aws_region_final | default(aws_region) | default(region) | default('us-east-1') }}
    --template-url https://s3.amazonaws.com/{{ bucket_templates }}/{{ config }}.{{ guid }}.{{ cloud_provider }}_cloud_template
  changed_when: false
  register: r_cloudformation_validation
  until: r_cloudformation_validation is succeeded
  retries: "{{ cloudformation_retries }}"
  delay: 20
