---
- name: Gather subnet of VPC 1
  amazon.aws.ec2_vpc_subnet_facts:
    filters:
      "tag:aws:cloudformation:stack-name": "{{ project_tag }}"
    region: "{{ vpc_region }}"
  register: r_vpc1facts

- name: Fail when no subnet is found
  when: r_vpc1facts.subnets | length == 0
  ansible.builtin.fail:
    msg: "No subnet found in VPC in region {{ vpc_region }}"

- name: Save VPC facts
  ansible.builtin.set_fact:
    vpc_id: "{{ r_vpc1facts.subnets[0].vpc_id }}"
    cidr: "{{ r_vpc1facts.subnets[0].cidr_block }}"
    subnet_id: "{{ r_vpc1facts.subnets[0].subnet_id }}"

- name: Gather subnet of VPC 2
  amazon.aws.ec2_vpc_subnet_facts:
    filters:
      "tag:aws:cloudformation:stack-name": "{{ project_tag }}"
    region: "{{ peer_region }}"
  register: r_vpc2facts

- name: Fail when no subnet is found in VPC
  when: r_vpc2facts.subnets | length == 0
  ansible.builtin.fail:
    msg: "No subnet found in VPC {{ peer_region }}"

- name: Save peer VPC facts
  ansible.builtin.set_fact:
    peer_vpc_id: "{{ r_vpc2facts.subnets[0].vpc_id }}"
    peer_cidr: "{{ r_vpc2facts.subnets[0].cidr_block }}"
    peer_subnet_id: "{{ r_vpc2facts.subnets[0].subnet_id }}"

- name: Gather route table of VPC 1
  ec2_vpc_route_table_facts:
    filters:
      vpc-id: "{{ vpc_id }}"
      association.subnet-id: "{{ subnet_id }}"
    region: "{{ vpc_region }}"
  register: r_vpc1_route

- name: Fail when no route table found
  when: r_vpc1_route.route_tables | length == 0
  ansible.builtin.fail:
    msg: >-
      no route table found for VPC {{ vpc_id }}
      and subnet {{ subnet_id }} in {{ vpc_region }}

- name: Save VPC route table ID
  ansible.builtin.set_fact:
    rt_id: "{{ r_vpc1_route.route_tables[0].id }}"

- name: Gather route table of VPC 2
  ec2_vpc_route_table_facts:
    filters:
      vpc-id: "{{ peer_vpc_id }}"
      association.subnet-id: "{{ peer_subnet_id }}"
    region: "{{ peer_region }}"
  register: r_vpc2_route

- name: Fail when no route table found in VPC 2
  when: r_vpc2_route.route_tables | length == 0
  ansible.builtin.fail:
    msg: >-
      no route table found for VPC {{ peer_vpc_id }}
      and subnet {{ peer_subnet_id }} in {{ peer_region }}

- name: Save peer VPC route table id
  ansible.builtin.set_fact:
    peer_rt_id: "{{ r_vpc2_route.route_tables[0].id }}"

- name: Create extra-region VPC peering Connection
  ec2_vpc_peer:
    region: "{{ vpc_region }}"
    vpc_id: "{{ vpc_id }}"
    peer_vpc_id: "{{ peer_vpc_id }}"
    peer_region: "{{ peer_region }}"
    state: present
    tags:
      Name: Peering connection for {{ vpc_region }} VPC to {{ peer_region }} VPC
      Comment: Created by AgnosticD
      stack: "{{ project_tag }}"
  register: r_vpc_peer_reg

- name: Sleep for 3 seconds
  ansible.builtin.pause:
    seconds: 5

- name: Accept peering connection from peer region
  community.aws.ec2_vpc_peer:
    region: "{{ peer_region }}"
    peering_id: "{{ r_vpc_peer_reg.peering_id }}"
    state: accept
  register: r_vpc_peer_reg
  until: r_vpc_peer_reg is succeeded
  retries: 5
  delay: 10

- name: Set up subnet route table VPC 1
  community.aws.ec2_vpc_route_table:
    lookup: id
    route_table_id: "{{ rt_id }}"
    purge_routes: false
    tags:
      stack: "{{ project_tag }}"
      Comment: Created by AgnosticD
    vpc_id: "{{ vpc_id }}"
    region: "{{ vpc_region }}"
    routes:
    - dest: "{{ peer_cidr }}"
      vpc_peering_connection_id: "{{ r_vpc_peer_reg.peering_id }}"

- name: Set up subnet route table VPC 2
  community.aws.ec2_vpc_route_table:
    lookup: id
    route_table_id: "{{ peer_rt_id }}"
    purge_routes: false
    tags:
      stack: "{{ project_tag }}"
      Comment: Created by AgnosticD
    vpc_id: "{{ peer_vpc_id }}"
    region: "{{ peer_region }}"
    routes:
    - dest: "{{ cidr }}"
      vpc_peering_connection_id: "{{ vpc_peer_reg.peering_id }}"

- name: Setup peer private zone
  when: peer_private_zone is defined
  block:
  - name: Find HostedZoneId for Private zone 2
    ansible.builtin.command: >-
      aws route53 list-hosted-zones-by-name
      --dns-name {{ peer_private_zone }}
      --max-items 2
    register: r_awsroute53zone
    changed_when: false

  - name: Associate VPC with Private Zone 2
    when:
    - _zone.Name == peer_private_zone
    - _zone.Config.PrivateZone
    ansible.builtin.command: >-
      aws route53 associate-vpc-with-hosted-zone
      --hosted-zone-id {{ _zone.Id | regex_replace('/hostedzone/', '') }}
      --vpc VPCRegion={{ vpc_region }},VPCId={{ vpc_id }}
    register: r_associate_reg
    failed_when:
    - r_associate_reg.rc != 0
    - not 'is already associated' in r_associate_reg.stderr
    changed_when:
    - not 'is already associated' in r_associate_reg.stderr
    loop: "{{ r_awsroute53zone.stdout | from_json | json_query('HostedZones') }}"
    loop_control:
      loop_var: _zone

- name: VPC Private Zone
  when: vpc_private_zone is defined
  block:
  - name: Find HostedZoneId for Private zone 1
    ansible.builtin.command: >-
      aws route53 list-hosted-zones-by-name
      --dns-name {{ vpc_private_zone }}
      --max-items 2
    register: r_awsroute53zone
    changed_when: false

  - name: Associate VPC with remove Private Zone 1
    when:
    - _zone.Name == vpc_private_zone
    - _zone.Config.PrivateZone
    ansible.builtin.command: >-
      aws route53 associate-vpc-with-hosted-zone
      --hosted-zone-id {{ _zone.Id | regex_replace('/hostedzone/', '') }}
      --vpc VPCRegion={{ peer_region }},VPCId={{ peer_vpc_id }}
    register: r_associate_reg
    failed_when:
    - r_associate_reg.rc != 0
    - not 'is already associated' in r_associate_reg.stderr
    changed_when:
    - not 'is already associated' in r_associate_reg.stderr
    loop: "{{ r_awsroute53zone.stdout | from_json | json_query('HostedZones') }}"
    loop_control:
      loop_var: _zone
