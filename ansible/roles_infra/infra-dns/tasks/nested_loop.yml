---
- name: Set the query to find the public IPv4 IP of the instance
  ansible.builtin.set_fact:
    find_ip_query: >-
      {%- if cloud_provider == 'equinix_metal' -%}
      results[?hostname=='{{ _instance_name }}'] | [0].ip_addresses[?public==`true` && address_family==`4`].address|[0]
      {%- elif cloud_provider == 'vmc' or cloud_provider == 'vmware_ibm' -%}
      localhost.publicips[?name=='{{ _instance_name }}'].ip
      {%- endif -%}

- name: Create DNS
  when: _dns_state == 'present'
  block:
  - name: Print floating IP
    ansible.builtin.debug:
      msg: >-
        The floating IP for {{ _instance_name }}
        is {{ vars[infra_dns_inventory_var] | json_query(find_ip_query) }}

  - name: DNS entry ({{ _dns_state | default('present') }})
    when: cluster_dns_server is defined
    community.general.nsupdate:
      server: >-
        {{ cluster_dns_server
        | ipaddr
        | ternary(cluster_dns_server, lookup('dig', cluster_dns_server))
        }}
      zone: "{{ cluster_dns_zone }}"
      record: "{{ _instance_name }}.{{ guid }}"
      type: A
      ttl: "{{ infra_dns_default_ttl }}"
      value: "{{ vars[infra_dns_inventory_var] | json_query(find_ip_query) }}"
      port: "{{ cluster_dns_port | default('53') }}"
      key_name: "{{ ddns_key_name }}"
      key_algorithm: "{{ ddns_key_algorithm | d('hmac-md5') }}"
      key_secret: "{{ ddns_key_secret }}"

  - name: DNS entry ({{ _dns_state | default('present') }})
    when: route53_aws_zone_id is defined
    community.aws.route53:
      state: present
      aws_access_key_id: "{{ route53_aws_access_key_id }}"
      aws_secret_access_key: "{{ route53_aws_secret_access_key }}"
      hosted_zone_id: "{{ route53_aws_zone_id }}"
      record: "{{ _instance_name }}.{{ guid }}.{{ cluster_dns_zone }}"
      zone: "{{ cluster_dns_zone }}"
      value: "{{ vars[infra_dns_inventory_var] | json_query(find_ip_query) }}"
      type: A
    register: _route53_record
    retries: 10
    delay: "{{ 60 | random(start=5, step=1) }}"
    until: _route53_record is succeeded

  - name: Add public_dns entry to host
    ansible.builtin.add_host:
      name: "{{ _instance_name }}"
      public_dns_name: "{{ _instance_name }}.{{ guid }}.{{ cluster_dns_zone }}"

  - name: DNS alternative entry ({{ _dns_state | default('present') }})
    when: cluster_dns_server is defined and _alt_names | length > 0
    loop: "{{ _alt_names }}"
    loop_control:
      loop_var: _alt_name
    community.general.nsupdate:
      server: >-
        {{ cluster_dns_server
        | ipaddr
        | ternary(cluster_dns_server, lookup('dig', cluster_dns_server))
        }}
      zone: "{{ cluster_dns_zone }}"
      record: "{{ _alt_name }}{{ _index }}.{{ guid }}"
      type: CNAME
      ttl: "{{ infra_dns_default_ttl }}"
      value: "{{ _instance_name }}.{{ guid }}"
      port: "{{ cluster_dns_port | default('53') }}"
      key_name: "{{ ddns_key_name }}"
      key_algorithm: "{{ ddns_key_algorithm | default('hmac-md5') }}"
      key_secret: "{{ ddns_key_secret }}"

  - name: DNS alternative entry ({{ _dns_state | default('present') }})
    when: route53_aws_zone_id is defined and _alt_names | length > 0
    community.aws.route53:
      state: present
      aws_access_key_id: "{{ route53_aws_access_key_id }}"
      aws_secret_access_key: "{{ route53_aws_secret_access_key }}"
      hosted_zone_id: "{{ route53_aws_zone_id }}"
      record: "{{ _alt_name }}{{ _index }}.{{ guid }}.{{ cluster_dns_zone }}"
      zone: "{{ cluster_dns_zone }}"
      value: "{{ vars[infra_dns_inventory_var] | json_query(find_ip_query) }}"
      type: A
    loop: "{{ _alt_names }}"
    loop_control:
      loop_var: _alt_name
    register: _route53_record
    retries: 10
    delay: "{{ 60 | random(start=5, step=1) }}"
    until: _route53_record is succeeded

# When state == absent, don't use inventory var (should not be needed)
- name: Remove DNS
  when: _dns_state == 'absent'
  block:
  - name: DNS entry ({{ _dns_state | default('present') }})
    when: cluster_dns_server is defined
    community.general.nsupdate:
      server: >-
        {{ cluster_dns_server
        | ipaddr
        | ternary(cluster_dns_server, lookup('dig', cluster_dns_server))
        }}
      zone: "{{ cluster_dns_zone }}"
      record: "{{ _instance_name }}.{{ guid }}"
      type: A
      ttl: "{{ infra_dns_default_ttl }}"
      port: "{{ cluster_dns_port | default('53') }}"
      key_name: "{{ ddns_key_name }}"
      key_algorithm: "{{ ddns_key_algorithm | default('hmac-md5') }}"
      key_secret: "{{ ddns_key_secret }}"
      state: absent

  - name: DNS entry ({{ _dns_state | default('present') }})
    when: route53_aws_zone_id is defined
    community.aws.route53:
      state: absent
      aws_access_key_id: "{{ route53_aws_access_key_id }}"
      aws_secret_access_key: "{{ route53_aws_secret_access_key }}"
      hosted_zone_id: "{{ route53_aws_zone_id }}"
      record: "{{ _instance_name }}.{{ guid }}.{{ cluster_dns_zone }}"
      zone: "{{ cluster_dns_zone }}"
      type: A
    register: _route53_record
    retries: 10
    delay: "{{ 60 | random(start=5, step=1) }}"
    until: _route53_record is succeeded

  - name: DNS alternative entry ({{ _dns_state | default('present') }})
    when: cluster_dns_server is defined and _alt_names | length > 0
    community.general.nsupdate:
      server: >-
        {{ cluster_dns_server
        | ipaddr
        | ternary(cluster_dns_server, lookup('dig', cluster_dns_server))
        }}
      zone: "{{ cluster_dns_zone }}"
      record: "{{ _alt_name }}{{ _index }}.{{ guid }}"
      type: CNAME
      ttl: "{{ infra_dns_default_ttl }}"
      value: "{{ _instance_name }}.{{ guid }}"
      port: "{{ cluster_dns_port | default('53') }}"
      key_name: "{{ ddns_key_name }}"
      key_algorithm: "{{ ddns_key_algorithm | default('hmac-md5') }}"
      key_secret: "{{ ddns_key_secret }}"
      state: absent
    loop: "{{ _alt_names }}"
    loop_control:
      loop_var: _alt_name

  - name: DNS alternative entry ({{ _dns_state | default('present') }})
    when: route53_aws_zone_id is defined and _alt_names | length > 0
    loop: "{{ _alt_names }}"
    loop_control:
      loop_var: _alt_name
    community.aws.route53:
      state: absent
      aws_access_key_id: "{{ route53_aws_access_key_id }}"
      aws_secret_access_key: "{{ route53_aws_secret_access_key }}"
      hosted_zone_id: "{{ route53_aws_zone_id }}"
      record: "{{ _alt_name }}{{ _index }}.{{ guid }}.{{ cluster_dns_zone }}"
      zone: "{{ cluster_dns_zone }}"
      type: A
    register: _route53_record
    retries: 10
    delay: "{{ 60 | random(start=5, step=1) }}"
    until: _route53_record is succeeded
