---
- name: Step 002 - Post Infrastructure
  hosts: localhost
  connection: local
  become: false
  gather_facts: false
  tasks:
  - name: Save user data
    agnosticd_user_info:
      data:
        guid: "{{ guid }}"
        cloud_provider: "{{ cloud_provider | default('none') }}"

  - name: AWS Post Infrastructure
    when: cloud_provider is match("aws")
    block:
    - name: Debug cloudformation_out_final
      when: cloudformation_out_final is defined
      ansible.builtin.debug:
        var: cloudformation_out_final
        verbosity: 2

    - name: Debug cloudformation_out_existing
      when: cloudformation_out_existing is defined
      ansible.builtin.debug:
        var: cloudformation_out_existing
        verbosity: 2

    # See logic in cloud_providers/aws/aws_infrastructure_deployment.yml for how these variables are set
    - name: Save Route53User credentials from stack outputs (CloudFormation just created)
      when:
      - not cloudformation_already_deployed | bool
      - cloudformation_out_final is defined
      - cloudformation_out_final.stack_outputs.Route53UserAccessKey is defined
      - cloudformation_out_final.stack_outputs.Route53UserSecretAccessKey is defined
      ansible.builtin.set_fact:
        route53user: "{{ cloudformation_out_final.stack_outputs.Route53User }}"
        route53user_access_key: "{{ cloudformation_out_final.stack_outputs.Route53UserAccessKey }}"
        route53user_secret_access_key: "{{ cloudformation_out_final.stack_outputs.Route53UserSecretAccessKey }}"

    - name: Save Route53User credentials from stack outputs (CloudFormation existed previously)
      when:
      - cloudformation_already_deployed | bool
      - cloudformation_existing is defined
      - cloudformation_existing[project_tag].stack_outputs.Route53UserAccessKey is defined
      - cloudformation_existing[project_tag].stack_outputs.Route53UserSecretAccessKey is defined
      ansible.builtin.set_fact:
        route53user: "{{ cloudformation_existing[project_tag].stack_outputs.Route53User }}"
        route53user_access_key: "{{ cloudformation_existing[project_tag].stack_outputs.Route53UserAccessKey }}"
        route53user_secret_access_key: "{{ cloudformation_existing[project_tag].stack_outputs.Route53UserSecretAccessKey }}"

    - name: Debug Route53 variables
      ansible.builtin.debug:
        msg: "{{ item }}"
      loop:
      - "route53user: {{ route53user }}"
      - "route53user_access_key: {{ route53user_access_key }}"
      - "route53user_secret_access_key: {{ route53user_secret_access_key }}"

  - name: GCP Post Infrastructure
    when: cloud_provider is match("gcp")
    block:
    - name: Create secret for SSH Key
      ansible.builtin.include_role:
        name: infra_gcp_ssh_key

  - name: Azure Post Infrastructure
    when: cloud_provider is match("azure")
    block:
    - name: Set FQDN for the bastion VM
      when: item.name is match('bastion')
      ansible.builtin.set_fact:
        rhel_remote_host: "{{ item.fqdns | default(item.publicIps) | default('') }}"
      loop: "{{ vm_list }}"

    - name: Set FQDN for each Windows VM
      ansible.builtin.set_fact:
        windows_remote_hosts: ""

    - name: Set FQDN for each Windows VM
      when: item.name is match('vmwin*')
      ansible.builtin.set_fact:
        windows_remote_hosts: "{{ item.fqdns | default(item.publicIps) | default('') }},{{ windows_remote_hosts }}"
      loop: "{{ vm_list }}"

    - name: Print Host Information
      when: openshift_cluster_show_access_user_info | bool
      agnosticd_user_info:
        msg: "{{ item }}"
      loop:
      - "Remote User: {{ remote_user }}"
      - "RHEL Bastion Host: {{ rhel_remote_host }}"
      - "Windows Host(s): {{ windows_remote_hosts }}"
      - "Windows Password: {{ windows_password }}"
