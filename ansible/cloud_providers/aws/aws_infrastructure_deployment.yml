---
- name: Import AWS Pre checks
  ansible.builtin.import_playbook: aws_pre_checks.yml

- name: Step 001.1 Deploy Infrastructure
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tasks:
  - name: Run infra_images
    ansible.builtin.include_role:
      name: infra_images

  - name: Run infra_aws_capacity_reservation
    vars:
      ACTION: provision
    ansible.builtin.include_role:
      name: infra_aws_capacity_reservation

  - name: Rerun detection
    when: agnosticd_aws_capacity_reservation_results.reservations | default({}) | length > 0
    block:
    - name: Empty the agnosticd_images and run the detection again
      ansible.builtin.set_fact:
        agnosticd_images: {}

    - name: Run infra-images again to use the proper region selected by the reservations
      ansible.builtin.include_role:
        name: infra_images

  - name: Run infra_aws-open_environment role
    when: agnosticd_open_environment | default(false) | bool
    vars:
      ACTION: provision
    ansible.builtin.include_role:
      name: infra_aws

  - name: Create SSH provision key
    when:
    - instances | default([]) | length
    - ssh_provision_key_name is undefined
    ansible.builtin.include_role:
      name: create_ssh_provision_key

  - name: Locate environment SSH key
    when: instances | default([]) | length > 0
    ansible.builtin.include_role:
      name: locate_env_authorized_key

  - name: Create keypair in AWS
    when: instances | default([]) | length > 0
    ansible.builtin.include_role:
      name: infra_aws_ssh_key

  - name: Run infra_aws_template_generate role
    ansible.builtin.include_role:
      name: infra_aws_template_generate

  - name: Check if Cloudformation has been deployed already
    amazon.aws.cloudformation_info:
      aws_access_key: "{{ aws_access_key_id }}"
      aws_secret_key: "{{ aws_secret_access_key }}"
      stack_name: "{{ project_tag }}"
      region: "{{ aws_region }}"
    register: r_cloudformation

  - name: Debug cloudformation
    ansible.builtin.debug:
      var: r_cloudformation

  - name: Set cloudformation already deployed fact to true
    when: r_cloudformation.cloudformation | length > 0
    ansible.builtin.set_fact:
      cloudformation_already_deployed: true
      cloudformation_existing: "{{ r_cloudformation.cloudformation }}"

  - name: Set cloudformation already deployed fact to false
    when: r_cloudformation.cloudformation | length == 0
    ansible.builtin.set_fact:
      cloudformation_already_deployed: false

  - name: Run infra_aws_template_create role
    when: 
    - cloudformation_enabled | default(true) | bool
    - not cloudformation_already_deployed | bool
    vars:
      aws_region_loop: "{{ aws_region }}"
    ansible.builtin.include_role:
      name: infra_aws_template_create

  - name: Run infra_aws_template_create role into fallback region
    when:
    - cloudformation_enabled | default(true) | bool
    - not cloudformation_already_deployed | bool
    - fallback_regions is defined
    - cloudformation_out is failed
    vars:
      aws_region_loop: "{{ item }}"
    ansible.builtin.include_role:
      name: infra_aws_template_create
    loop: "{{ fallback_regions }}"

  - name: Report cloudformation error
    ansible.builtin.fail:
      msg: "FAIL {{ project_tag }} Create Cloudformation"
    when:
    - cloudformation_enabled | default(true) | bool
    - not cloudformation_already_deployed | bool
    - not cloudformation_out is succeeded

- name: Step 001.2 Create inventory and SSH config setup
  hosts: localhost
  connection: local
  gather_facts: false
  become: false
  tasks:
  - name: Create SSH config
    when: create_ssh_config | default(true) | bool
    block:
    # Sometimes the infra step is skipped, for example when scaling up a cluster.
    # when step001.1 is skipped, aws_region_final is not defined.
    - name: Include detect region tasks
      when: aws_region_final is not defined
      ansible.builtin.include_tasks: aws_detect_region_tasks.yml

    - name: Run infra_aws_create_inventory role
      ansible.builtin.include_role:
        name: infra_aws_create_inventory

    - name: Run common SSH config generator role
      when:
      - groups.bastions is defined
      - groups.bastions | length > 0
      ansible.builtin.include_role:
        name: infra_common_ssh_config_generate

- name: Include global vars again, this time for all hosts now that the inventory is built
  ansible.builtin.import_playbook: ../../include_vars.yml

- name: Step 001.3 Configure Linux hosts and wait for connection
  hosts:
  - all:!windows:!network
  gather_facts: false
  any_errors_fatal: true
  ignore_errors: false
  become: true
  tasks:
  - name: Set facts for remote access
    ansible.builtin.set_fact:
      aws_region_final: "{{ hostvars.localhost.aws_region_final }}"
      ansible_ssh_extra_args: "{{ ansible_ssh_extra_args | default() }} -F {{ output_dir }}/{{ config }}_{{ guid }}_ssh_conf"

  - name: Run infra_aws_wait_for_linux_hosts role
    ansible.builtin.include_role:
      name: infra_aws_wait_for_linux_hosts

  - name: Run infra_aws_linux_set_hostname role
    ansible.builtin.include_role:
      name: infra_aws_linux_set_hostname

  - name: Add authorized_keys
    when: >-
      ssh_authorized_keys | default([]) | length > 0
      or
      all_ssh_authorized_keys | default([]) | length > 0
    ansible.builtin.include_role:
      name: ssh_authorized_keys

- name: Step 001.4 Configure Windows hosts and wait for connection
  gather_facts: false
  hosts:
  - windows
  tasks:
  - name: Set facts for Windows remote access
    when: infra_windows_connection_facts_type is defined
    ansible.builtin.include_role:
      name: infra_windows_connection_facts

  - name: Set facts for remote access
    when: infra_windows_connection_facts_type is not defined
    ansible.builtin.set_fact:
      ansible_become: false
      ansible_connection: winrm
      ansible_host: "{{ public_dns_name }}"
      ansible_password: "{{ hostvars.localhost.windows_password | default(hostvars.localhost.generated_windows_password) }}"
      ansible_port: 5986
      ansible_user: Administrator
      ansible_winrm_server_cert_validation: ignore
      aws_region_final: "{{ hostvars.localhost.aws_region_final }}"

  - name: Run infra_aws_wait_for_windows_hosts role
    ansible.builtin.include_role:
      name: infra_aws_wait_for_windows_hosts

  - name: Set output_dir for all Windows hosts
    ansible.builtin.set_fact:
      output_dir: "{{ hostvars.localhost.output_dir }}"
