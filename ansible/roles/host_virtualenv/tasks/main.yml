---
- name: Check host_virtualenv_path is defined
  ansible.builtin.assert:
    that: host_virtualenv_path is defined
    fail_msg: host_virtualenv_path must be defined

- name: Gather basic ansible facts to determine pkg_mgr
  when: ansible_facts.pkg_mgr | default('') == ''
  ansible.builtin.setup:
    gather_subset: min

- name: Install virtualenv package prerequisites
  when:
  - host_virtualenv_package_prereqs_install | bool
  - host_virtualenv_package_prereqs | length > 0
  ansible.builtin.package:
    name: "{{ host_virtualenv_package_prereqs }}"
  register: r_package

- name: Install virtualenv module system-wide for compatibility with previous behavior
  ansible.builtin.pip:
    name: virtualenv
    executable: /usr/bin/pip3

- name: Make virtualenv path
  ansible.builtin.file:
    path: "{{ host_virtualenv_path }}"
    state: directory
    mode: u=rwx,go=rx
    owner: "{{ host_virtualenv_owner | default(omit) }}"
    group: "{{ host_virtualenv_group | default(omit) }}"

- name: Write {{ host_virtualenv_path }}/host_virtualenv-requirements.txt
  ansible.builtin.copy:
    content: >-
      {{ lookup('host_virtualenv_combined_requirements', host_virtualenv_requirements, override=host_virtualenv_requirements_override) }}
    dest: "{{ host_virtualenv_path }}/host_virtualenv-requirements.txt"
    mode: u=rw,go=r
    owner: "{{ host_virtualenv_owner | default(omit) }}"
    group: "{{ host_virtualenv_group | default(omit) }}"

- name: Set up virtualenv with updated pip
  ansible.builtin.pip:
    name: pip
    state: latest
    virtualenv: "{{ host_virtualenv_path }}"
    virtualenv_command: >-
      {% if 'python2' in host_virtualenv_python %}
      {{ host_virtualenv_python }} -m virtualenv
      {% else %}
      {{ host_virtualenv_python }} -m venv
      {% endif %}
  # Retry in case of pip communication issues
  retries: 10
  delay: 30

- name: Install requirements in virtualenv
  ansible.builtin.pip:
    requirements: "{{ host_virtualenv_path }}/host_virtualenv-requirements.txt"
    virtualenv: "{{ host_virtualenv_path }}"
    virtualenv_command: >-
      {% if 'python2' in host_virtualenv_python %}
      {{ host_virtualenv_python }} -m virtualenv
      {% else %}
      {{ host_virtualenv_python }} -m venv
      {% endif %}
  # Retry in case of pip communication issues
  retries: 10
  delay: 30

- name: Ownership of files in virtualenv path
  when: >-
    host_virtualenv_owner is defined or
    host_virtualenv_group is defined
  ansible.builtin.file:
    path: "{{ host_virtualenv_path }}"
    state: directory
    owner: "{{ host_virtualenv_owner | default(omit) }}"
    group: "{{ host_virtualenv_group | default(omit) }}"
    recurse: true
